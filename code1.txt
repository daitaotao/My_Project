package com.example

import org.apache.hadoop.hive.ql.exec.UDAF
import org.apache.hadoop.hive.ql.exec.UDAFEvaluator
import org.apache.hadoop.io.Text

class FindDifferentColumnsUDAF extends UDAF {
  class FindDifferentColumnsUDAFEvaluator extends UDAFEvaluator {
    private var key: Text = _
    private var diffCols: Text = _

    def init(): Unit = {
      key = null
      diffCols = null
    }

    def iterate(count: Int, keyStr: String, cols: String*): Boolean = {
      if (key == null) {
        key = new Text(keyStr)
      }

      if (keyStr == key.toString) {
        val distinctCols = cols.distinct
        if (distinctCols.size > 1) {
          if (diffCols == null) {
            diffCols = new Text(distinctCols.mkString(","))
          } else {
            val existingCols = diffCols.toString.split(",")
            val newCols = distinctCols.filterNot(existingCols.contains)
            diffCols.set((existingCols ++ newCols).mkString(","))
          }
        }
      }

      true
    }

    def terminatePartial(): Text = {
      diffCols
    }

    def merge(other: Text): Boolean = {
      if (other != null && other.getLength > 0) {
        if (diffCols == null) {
          diffCols = new Text(other)
        } else {
          val existingCols = diffCols.toString.split(",")
          val otherCols = other.toString.split(",")
          diffCols.set((existingCols intersect otherCols).mkString(","))
        }
      }
      true
    }

    def terminate(): Text = {
      diffCols
    }
  }
}
